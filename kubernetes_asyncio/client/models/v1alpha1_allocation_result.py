# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.26.9
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from kubernetes_asyncio.client.configuration import Configuration


class V1alpha1AllocationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_on_nodes': 'V1NodeSelector',
        'resource_handle': 'str',
        'shareable': 'bool'
    }

    attribute_map = {
        'available_on_nodes': 'availableOnNodes',
        'resource_handle': 'resourceHandle',
        'shareable': 'shareable'
    }

    def __init__(self, available_on_nodes=None, resource_handle=None, shareable=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1AllocationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._available_on_nodes = None
        self._resource_handle = None
        self._shareable = None
        self.discriminator = None

        if available_on_nodes is not None:
            self.available_on_nodes = available_on_nodes
        if resource_handle is not None:
            self.resource_handle = resource_handle
        if shareable is not None:
            self.shareable = shareable

    @property
    def available_on_nodes(self):
        """Gets the available_on_nodes of this V1alpha1AllocationResult.  # noqa: E501


        :return: The available_on_nodes of this V1alpha1AllocationResult.  # noqa: E501
        :rtype: V1NodeSelector
        """
        return self._available_on_nodes

    @available_on_nodes.setter
    def available_on_nodes(self, available_on_nodes):
        """Sets the available_on_nodes of this V1alpha1AllocationResult.


        :param available_on_nodes: The available_on_nodes of this V1alpha1AllocationResult.  # noqa: E501
        :type available_on_nodes: V1NodeSelector
        """

        self._available_on_nodes = available_on_nodes

    @property
    def resource_handle(self):
        """Gets the resource_handle of this V1alpha1AllocationResult.  # noqa: E501

        ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.  The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.  # noqa: E501

        :return: The resource_handle of this V1alpha1AllocationResult.  # noqa: E501
        :rtype: str
        """
        return self._resource_handle

    @resource_handle.setter
    def resource_handle(self, resource_handle):
        """Sets the resource_handle of this V1alpha1AllocationResult.

        ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.  The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.  # noqa: E501

        :param resource_handle: The resource_handle of this V1alpha1AllocationResult.  # noqa: E501
        :type resource_handle: str
        """

        self._resource_handle = resource_handle

    @property
    def shareable(self):
        """Gets the shareable of this V1alpha1AllocationResult.  # noqa: E501

        Shareable determines whether the resource supports more than one consumer at a time.  # noqa: E501

        :return: The shareable of this V1alpha1AllocationResult.  # noqa: E501
        :rtype: bool
        """
        return self._shareable

    @shareable.setter
    def shareable(self, shareable):
        """Sets the shareable of this V1alpha1AllocationResult.

        Shareable determines whether the resource supports more than one consumer at a time.  # noqa: E501

        :param shareable: The shareable of this V1alpha1AllocationResult.  # noqa: E501
        :type shareable: bool
        """

        self._shareable = shareable

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1AllocationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1AllocationResult):
            return True

        return self.to_dict() != other.to_dict()
