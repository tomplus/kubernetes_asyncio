# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_node_status import V1NodeStatus  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1NodeStatus(unittest.TestCase):
    """V1NodeStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1NodeStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_node_status.V1NodeStatus()  # noqa: E501
        if include_optional :
            return V1NodeStatus(
                addresses = [
                    kubernetes_asyncio.client.models.v1/node_address.v1.NodeAddress(
                        address = '', 
                        type = '', )
                    ], 
                allocatable = {
                    'key' : ''
                    }, 
                capacity = {
                    'key' : ''
                    }, 
                conditions = [
                    kubernetes_asyncio.client.models.v1/node_condition.v1.NodeCondition(
                        last_heartbeat_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '', 
                        reason = '', 
                        status = '', 
                        type = '', )
                    ], 
                config = kubernetes_asyncio.client.models.v1/node_config_status.v1.NodeConfigStatus(
                    active = kubernetes_asyncio.client.models.v1/node_config_source.v1.NodeConfigSource(
                        config_map = kubernetes_asyncio.client.models.v1/config_map_node_config_source.v1.ConfigMapNodeConfigSource(
                            kubelet_config_key = '', 
                            name = '', 
                            namespace = '', 
                            resource_version = '', 
                            uid = '', ), ), 
                    assigned = kubernetes_asyncio.client.models.v1/node_config_source.v1.NodeConfigSource(), 
                    error = '', 
                    last_known_good = kubernetes_asyncio.client.models.v1/node_config_source.v1.NodeConfigSource(), ), 
                daemon_endpoints = kubernetes_asyncio.client.models.v1/node_daemon_endpoints.v1.NodeDaemonEndpoints(
                    kubelet_endpoint = kubernetes_asyncio.client.models.v1/daemon_endpoint.v1.DaemonEndpoint(
                        port = 56, ), ), 
                images = [
                    kubernetes_asyncio.client.models.v1/container_image.v1.ContainerImage(
                        names = [
                            ''
                            ], 
                        size_bytes = 56, )
                    ], 
                node_info = kubernetes_asyncio.client.models.v1/node_system_info.v1.NodeSystemInfo(
                    architecture = '', 
                    boot_id = '', 
                    container_runtime_version = '', 
                    kernel_version = '', 
                    kube_proxy_version = '', 
                    kubelet_version = '', 
                    machine_id = '', 
                    operating_system = '', 
                    os_image = '', 
                    system_uuid = '', ), 
                phase = '', 
                volumes_attached = [
                    kubernetes_asyncio.client.models.v1/attached_volume.v1.AttachedVolume(
                        device_path = '', 
                        name = '', )
                    ], 
                volumes_in_use = [
                    ''
                    ]
            )
        else :
            return V1NodeStatus(
        )

    def testV1NodeStatus(self):
        """Test V1NodeStatus"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
