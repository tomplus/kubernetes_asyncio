# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_device_request import V1beta1DeviceRequest  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1DeviceRequest(unittest.TestCase):
    """V1beta1DeviceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1DeviceRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_device_request.V1beta1DeviceRequest()  # noqa: E501
        if include_optional :
            return V1beta1DeviceRequest(
                admin_access = True, 
                allocation_mode = '', 
                count = 56, 
                device_class_name = '', 
                first_available = [
                    kubernetes_asyncio.client.models.v1beta1/device_sub_request.v1beta1.DeviceSubRequest(
                        allocation_mode = '', 
                        count = 56, 
                        device_class_name = '', 
                        name = '', 
                        selectors = [
                            kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector(
                                cel = kubernetes_asyncio.client.models.v1beta1/cel_device_selector.v1beta1.CELDeviceSelector(
                                    expression = '', ), )
                            ], 
                        tolerations = [
                            kubernetes_asyncio.client.models.v1beta1/device_toleration.v1beta1.DeviceToleration(
                                effect = '', 
                                key = '', 
                                operator = '', 
                                toleration_seconds = 56, 
                                value = '', )
                            ], )
                    ], 
                name = '', 
                selectors = [
                    kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector(
                        cel = kubernetes_asyncio.client.models.v1beta1/cel_device_selector.v1beta1.CELDeviceSelector(
                            expression = '', ), )
                    ], 
                tolerations = [
                    kubernetes_asyncio.client.models.v1beta1/device_toleration.v1beta1.DeviceToleration(
                        effect = '', 
                        key = '', 
                        operator = '', 
                        toleration_seconds = 56, 
                        value = '', )
                    ]
            )
        else :
            return V1beta1DeviceRequest(
                name = '',
        )

    def testV1beta1DeviceRequest(self):
        """Test V1beta1DeviceRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
