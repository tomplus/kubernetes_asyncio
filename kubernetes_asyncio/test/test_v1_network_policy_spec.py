# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_network_policy_spec import V1NetworkPolicySpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1NetworkPolicySpec(unittest.TestCase):
    """V1NetworkPolicySpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1NetworkPolicySpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_network_policy_spec.V1NetworkPolicySpec()  # noqa: E501
        if include_optional :
            return V1NetworkPolicySpec(
                egress = [
                    kubernetes_asyncio.client.models.v1/network_policy_egress_rule.v1.NetworkPolicyEgressRule(
                        ports = [
                            kubernetes_asyncio.client.models.v1/network_policy_port.v1.NetworkPolicyPort(
                                end_port = 56, 
                                port = kubernetes_asyncio.client.models.port.port(), 
                                protocol = '', )
                            ], 
                        to = [
                            kubernetes_asyncio.client.models.v1/network_policy_peer.v1.NetworkPolicyPeer(
                                ip_block = kubernetes_asyncio.client.models.v1/ip_block.v1.IPBlock(
                                    cidr = '', 
                                    except = [
                                        ''
                                        ], ), 
                                namespace_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                                    match_expressions = [
                                        kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                pod_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(), )
                            ], )
                    ], 
                ingress = [
                    kubernetes_asyncio.client.models.v1/network_policy_ingress_rule.v1.NetworkPolicyIngressRule(
                        from = [
                            kubernetes_asyncio.client.models.v1/network_policy_peer.v1.NetworkPolicyPeer(
                                ip_block = kubernetes_asyncio.client.models.v1/ip_block.v1.IPBlock(
                                    cidr = '', 
                                    except = [
                                        ''
                                        ], ), 
                                namespace_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                                    match_expressions = [
                                        kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                pod_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(), )
                            ], 
                        ports = [
                            kubernetes_asyncio.client.models.v1/network_policy_port.v1.NetworkPolicyPort(
                                end_port = 56, 
                                port = kubernetes_asyncio.client.models.port.port(), 
                                protocol = '', )
                            ], )
                    ], 
                pod_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                    match_expressions = [
                        kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                            key = '', 
                            operator = '', 
                            values = [
                                ''
                                ], )
                        ], 
                    match_labels = {
                        'key' : ''
                        }, ), 
                policy_types = [
                    ''
                    ]
            )
        else :
            return V1NetworkPolicySpec(
                pod_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                    match_expressions = [
                        kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                            key = '', 
                            operator = '', 
                            values = [
                                ''
                                ], )
                        ], 
                    match_labels = {
                        'key' : ''
                        }, ),
        )

    def testV1NetworkPolicySpec(self):
        """Test V1NetworkPolicySpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
