# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_policy_rules_with_subjects import V1PolicyRulesWithSubjects  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1PolicyRulesWithSubjects(unittest.TestCase):
    """V1PolicyRulesWithSubjects unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1PolicyRulesWithSubjects
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_policy_rules_with_subjects.V1PolicyRulesWithSubjects()  # noqa: E501
        if include_optional :
            return V1PolicyRulesWithSubjects(
                non_resource_rules = [
                    kubernetes_asyncio.client.models.v1/non_resource_policy_rule.v1.NonResourcePolicyRule(
                        non_resource_urls = [
                            ''
                            ], 
                        verbs = [
                            ''
                            ], )
                    ], 
                resource_rules = [
                    kubernetes_asyncio.client.models.v1/resource_policy_rule.v1.ResourcePolicyRule(
                        api_groups = [
                            ''
                            ], 
                        cluster_scope = True, 
                        namespaces = [
                            ''
                            ], 
                        resources = [
                            ''
                            ], 
                        verbs = [
                            ''
                            ], )
                    ], 
                subjects = [
                    kubernetes_asyncio.client.models.flowcontrol/v1/subject.flowcontrol.v1.Subject(
                        group = kubernetes_asyncio.client.models.v1/group_subject.v1.GroupSubject(
                            name = '', ), 
                        kind = '', 
                        service_account = kubernetes_asyncio.client.models.v1/service_account_subject.v1.ServiceAccountSubject(
                            name = '', 
                            namespace = '', ), 
                        user = kubernetes_asyncio.client.models.v1/user_subject.v1.UserSubject(
                            name = '', ), )
                    ]
            )
        else :
            return V1PolicyRulesWithSubjects(
                subjects = [
                    kubernetes_asyncio.client.models.flowcontrol/v1/subject.flowcontrol.v1.Subject(
                        group = kubernetes_asyncio.client.models.v1/group_subject.v1.GroupSubject(
                            name = '', ), 
                        kind = '', 
                        service_account = kubernetes_asyncio.client.models.v1/service_account_subject.v1.ServiceAccountSubject(
                            name = '', 
                            namespace = '', ), 
                        user = kubernetes_asyncio.client.models.v1/user_subject.v1.UserSubject(
                            name = '', ), )
                    ],
        )

    def testV1PolicyRulesWithSubjects(self):
        """Test V1PolicyRulesWithSubjects"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
