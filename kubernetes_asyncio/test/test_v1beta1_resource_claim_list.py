# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_resource_claim_list import V1beta1ResourceClaimList  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1ResourceClaimList(unittest.TestCase):
    """V1beta1ResourceClaimList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1ResourceClaimList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_resource_claim_list.V1beta1ResourceClaimList()  # noqa: E501
        if include_optional :
            return V1beta1ResourceClaimList(
                api_version = '', 
                items = [
                    kubernetes_asyncio.client.models.v1beta1/resource_claim.v1beta1.ResourceClaim(
                        api_version = '', 
                        kind = '', 
                        metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = kubernetes_asyncio.client.models.v1beta1/resource_claim_spec.v1beta1.ResourceClaimSpec(
                            devices = kubernetes_asyncio.client.models.v1beta1/device_claim.v1beta1.DeviceClaim(
                                config = [
                                    kubernetes_asyncio.client.models.v1beta1/device_claim_configuration.v1beta1.DeviceClaimConfiguration(
                                        opaque = kubernetes_asyncio.client.models.v1beta1/opaque_device_configuration.v1beta1.OpaqueDeviceConfiguration(
                                            driver = '', 
                                            parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                                        requests = [
                                            ''
                                            ], )
                                    ], 
                                constraints = [
                                    kubernetes_asyncio.client.models.v1beta1/device_constraint.v1beta1.DeviceConstraint(
                                        match_attribute = '', )
                                    ], 
                                requests = [
                                    kubernetes_asyncio.client.models.v1beta1/device_request.v1beta1.DeviceRequest(
                                        admin_access = True, 
                                        allocation_mode = '', 
                                        count = 56, 
                                        device_class_name = '', 
                                        first_available = [
                                            kubernetes_asyncio.client.models.v1beta1/device_sub_request.v1beta1.DeviceSubRequest(
                                                allocation_mode = '', 
                                                count = 56, 
                                                device_class_name = '', 
                                                name = '', 
                                                selectors = [
                                                    kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector(
                                                        cel = kubernetes_asyncio.client.models.v1beta1/cel_device_selector.v1beta1.CELDeviceSelector(
                                                            expression = '', ), )
                                                    ], 
                                                tolerations = [
                                                    kubernetes_asyncio.client.models.v1beta1/device_toleration.v1beta1.DeviceToleration(
                                                        effect = '', 
                                                        key = '', 
                                                        operator = '', 
                                                        toleration_seconds = 56, 
                                                        value = '', )
                                                    ], )
                                            ], 
                                        name = '', 
                                        selectors = [
                                            kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector()
                                            ], 
                                        tolerations = [
                                            kubernetes_asyncio.client.models.v1beta1/device_toleration.v1beta1.DeviceToleration(
                                                effect = '', 
                                                key = '', 
                                                operator = '', 
                                                toleration_seconds = 56, 
                                                value = '', )
                                            ], )
                                    ], ), ), 
                        status = kubernetes_asyncio.client.models.v1beta1/resource_claim_status.v1beta1.ResourceClaimStatus(
                            allocation = kubernetes_asyncio.client.models.v1beta1/allocation_result.v1beta1.AllocationResult(
                                node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                    node_selector_terms = [
                                        kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                            match_expressions = [
                                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                    key = '', 
                                                    operator = '', 
                                                    values = [
                                                        ''
                                                        ], )
                                                ], 
                                            match_fields = [
                                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                    key = '', 
                                                    operator = '', )
                                                ], )
                                        ], ), ), 
                            reserved_for = [
                                kubernetes_asyncio.client.models.v1beta1/resource_claim_consumer_reference.v1beta1.ResourceClaimConsumerReference(
                                    api_group = '', 
                                    name = '', 
                                    resource = '', 
                                    uid = '', )
                                ], ), )
                    ], 
                kind = '', 
                metadata = kubernetes_asyncio.client.models.v1/list_meta.v1.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, 
                    resource_version = '', 
                    self_link = '', )
            )
        else :
            return V1beta1ResourceClaimList(
                items = [
                    kubernetes_asyncio.client.models.v1beta1/resource_claim.v1beta1.ResourceClaim(
                        api_version = '', 
                        kind = '', 
                        metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = kubernetes_asyncio.client.models.v1beta1/resource_claim_spec.v1beta1.ResourceClaimSpec(
                            devices = kubernetes_asyncio.client.models.v1beta1/device_claim.v1beta1.DeviceClaim(
                                config = [
                                    kubernetes_asyncio.client.models.v1beta1/device_claim_configuration.v1beta1.DeviceClaimConfiguration(
                                        opaque = kubernetes_asyncio.client.models.v1beta1/opaque_device_configuration.v1beta1.OpaqueDeviceConfiguration(
                                            driver = '', 
                                            parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                                        requests = [
                                            ''
                                            ], )
                                    ], 
                                constraints = [
                                    kubernetes_asyncio.client.models.v1beta1/device_constraint.v1beta1.DeviceConstraint(
                                        match_attribute = '', )
                                    ], 
                                requests = [
                                    kubernetes_asyncio.client.models.v1beta1/device_request.v1beta1.DeviceRequest(
                                        admin_access = True, 
                                        allocation_mode = '', 
                                        count = 56, 
                                        device_class_name = '', 
                                        first_available = [
                                            kubernetes_asyncio.client.models.v1beta1/device_sub_request.v1beta1.DeviceSubRequest(
                                                allocation_mode = '', 
                                                count = 56, 
                                                device_class_name = '', 
                                                name = '', 
                                                selectors = [
                                                    kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector(
                                                        cel = kubernetes_asyncio.client.models.v1beta1/cel_device_selector.v1beta1.CELDeviceSelector(
                                                            expression = '', ), )
                                                    ], 
                                                tolerations = [
                                                    kubernetes_asyncio.client.models.v1beta1/device_toleration.v1beta1.DeviceToleration(
                                                        effect = '', 
                                                        key = '', 
                                                        operator = '', 
                                                        toleration_seconds = 56, 
                                                        value = '', )
                                                    ], )
                                            ], 
                                        name = '', 
                                        selectors = [
                                            kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector()
                                            ], 
                                        tolerations = [
                                            kubernetes_asyncio.client.models.v1beta1/device_toleration.v1beta1.DeviceToleration(
                                                effect = '', 
                                                key = '', 
                                                operator = '', 
                                                toleration_seconds = 56, 
                                                value = '', )
                                            ], )
                                    ], ), ), 
                        status = kubernetes_asyncio.client.models.v1beta1/resource_claim_status.v1beta1.ResourceClaimStatus(
                            allocation = kubernetes_asyncio.client.models.v1beta1/allocation_result.v1beta1.AllocationResult(
                                node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                    node_selector_terms = [
                                        kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                            match_expressions = [
                                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                    key = '', 
                                                    operator = '', 
                                                    values = [
                                                        ''
                                                        ], )
                                                ], 
                                            match_fields = [
                                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                    key = '', 
                                                    operator = '', )
                                                ], )
                                        ], ), ), 
                            reserved_for = [
                                kubernetes_asyncio.client.models.v1beta1/resource_claim_consumer_reference.v1beta1.ResourceClaimConsumerReference(
                                    api_group = '', 
                                    name = '', 
                                    resource = '', 
                                    uid = '', )
                                ], ), )
                    ],
        )

    def testV1beta1ResourceClaimList(self):
        """Test V1beta1ResourceClaimList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
