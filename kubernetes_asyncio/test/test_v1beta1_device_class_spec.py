# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_device_class_spec import V1beta1DeviceClassSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1DeviceClassSpec(unittest.TestCase):
    """V1beta1DeviceClassSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1DeviceClassSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_device_class_spec.V1beta1DeviceClassSpec()  # noqa: E501
        if include_optional :
            return V1beta1DeviceClassSpec(
                config = [
                    kubernetes_asyncio.client.models.v1beta1/device_class_configuration.v1beta1.DeviceClassConfiguration(
                        opaque = kubernetes_asyncio.client.models.v1beta1/opaque_device_configuration.v1beta1.OpaqueDeviceConfiguration(
                            driver = '', 
                            parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), )
                    ], 
                selectors = [
                    kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector(
                        cel = kubernetes_asyncio.client.models.v1beta1/cel_device_selector.v1beta1.CELDeviceSelector(
                            expression = '', ), )
                    ]
            )
        else :
            return V1beta1DeviceClassSpec(
        )

    def testV1beta1DeviceClassSpec(self):
        """Test V1beta1DeviceClassSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
