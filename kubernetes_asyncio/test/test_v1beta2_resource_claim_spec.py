# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta2_resource_claim_spec import V1beta2ResourceClaimSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta2ResourceClaimSpec(unittest.TestCase):
    """V1beta2ResourceClaimSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta2ResourceClaimSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta2_resource_claim_spec.V1beta2ResourceClaimSpec()  # noqa: E501
        if include_optional :
            return V1beta2ResourceClaimSpec(
                devices = kubernetes_asyncio.client.models.v1beta2/device_claim.v1beta2.DeviceClaim(
                    config = [
                        kubernetes_asyncio.client.models.v1beta2/device_claim_configuration.v1beta2.DeviceClaimConfiguration(
                            opaque = kubernetes_asyncio.client.models.v1beta2/opaque_device_configuration.v1beta2.OpaqueDeviceConfiguration(
                                driver = '', 
                                parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                            requests = [
                                ''
                                ], )
                        ], 
                    constraints = [
                        kubernetes_asyncio.client.models.v1beta2/device_constraint.v1beta2.DeviceConstraint(
                            match_attribute = '', )
                        ], 
                    requests = [
                        kubernetes_asyncio.client.models.v1beta2/device_request.v1beta2.DeviceRequest(
                            exactly = kubernetes_asyncio.client.models.v1beta2/exact_device_request.v1beta2.ExactDeviceRequest(
                                admin_access = True, 
                                allocation_mode = '', 
                                count = 56, 
                                device_class_name = '', 
                                selectors = [
                                    kubernetes_asyncio.client.models.v1beta2/device_selector.v1beta2.DeviceSelector(
                                        cel = kubernetes_asyncio.client.models.v1beta2/cel_device_selector.v1beta2.CELDeviceSelector(
                                            expression = '', ), )
                                    ], 
                                tolerations = [
                                    kubernetes_asyncio.client.models.v1beta2/device_toleration.v1beta2.DeviceToleration(
                                        effect = '', 
                                        key = '', 
                                        operator = '', 
                                        toleration_seconds = 56, 
                                        value = '', )
                                    ], ), 
                            first_available = [
                                kubernetes_asyncio.client.models.v1beta2/device_sub_request.v1beta2.DeviceSubRequest(
                                    allocation_mode = '', 
                                    count = 56, 
                                    device_class_name = '', 
                                    name = '', )
                                ], 
                            name = '', )
                        ], )
            )
        else :
            return V1beta2ResourceClaimSpec(
        )

    def testV1beta2ResourceClaimSpec(self):
        """Test V1beta2ResourceClaimSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
