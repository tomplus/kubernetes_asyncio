# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v2beta2_metric_spec import V2beta2MetricSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV2beta2MetricSpec(unittest.TestCase):
    """V2beta2MetricSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V2beta2MetricSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v2beta2_metric_spec.V2beta2MetricSpec()  # noqa: E501
        if include_optional :
            return V2beta2MetricSpec(
                container_resource = kubernetes_asyncio.client.models.v2beta2/container_resource_metric_source.v2beta2.ContainerResourceMetricSource(
                    container = '', 
                    name = '', 
                    target = kubernetes_asyncio.client.models.v2beta2/metric_target.v2beta2.MetricTarget(
                        average_utilization = 56, 
                        average_value = '', 
                        type = '', 
                        value = '', ), ), 
                external = kubernetes_asyncio.client.models.v2beta2/external_metric_source.v2beta2.ExternalMetricSource(
                    metric = kubernetes_asyncio.client.models.v2beta2/metric_identifier.v2beta2.MetricIdentifier(
                        name = '', 
                        selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), ), 
                    target = kubernetes_asyncio.client.models.v2beta2/metric_target.v2beta2.MetricTarget(
                        average_utilization = 56, 
                        average_value = '', 
                        type = '', 
                        value = '', ), ), 
                object = kubernetes_asyncio.client.models.v2beta2/object_metric_source.v2beta2.ObjectMetricSource(
                    described_object = kubernetes_asyncio.client.models.v2beta2/cross_version_object_reference.v2beta2.CrossVersionObjectReference(
                        api_version = '', 
                        kind = '', 
                        name = '', ), 
                    metric = kubernetes_asyncio.client.models.v2beta2/metric_identifier.v2beta2.MetricIdentifier(
                        name = '', 
                        selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), ), 
                    target = kubernetes_asyncio.client.models.v2beta2/metric_target.v2beta2.MetricTarget(
                        average_utilization = 56, 
                        average_value = '', 
                        type = '', 
                        value = '', ), ), 
                pods = kubernetes_asyncio.client.models.v2beta2/pods_metric_source.v2beta2.PodsMetricSource(
                    metric = kubernetes_asyncio.client.models.v2beta2/metric_identifier.v2beta2.MetricIdentifier(
                        name = '', 
                        selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), ), 
                    target = kubernetes_asyncio.client.models.v2beta2/metric_target.v2beta2.MetricTarget(
                        average_utilization = 56, 
                        average_value = '', 
                        type = '', 
                        value = '', ), ), 
                resource = kubernetes_asyncio.client.models.v2beta2/resource_metric_source.v2beta2.ResourceMetricSource(
                    name = '', 
                    target = kubernetes_asyncio.client.models.v2beta2/metric_target.v2beta2.MetricTarget(
                        average_utilization = 56, 
                        average_value = '', 
                        type = '', 
                        value = '', ), ), 
                type = ''
            )
        else :
            return V2beta2MetricSpec(
                type = '',
        )

    def testV2beta2MetricSpec(self):
        """Test V2beta2MetricSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
