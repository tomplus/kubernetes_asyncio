# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_match_resources import V1beta1MatchResources  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1MatchResources(unittest.TestCase):
    """V1beta1MatchResources unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1MatchResources
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_match_resources.V1beta1MatchResources()  # noqa: E501
        if include_optional :
            return V1beta1MatchResources(
                exclude_resource_rules = [
                    kubernetes_asyncio.client.models.v1beta1/named_rule_with_operations.v1beta1.NamedRuleWithOperations(
                        api_groups = [
                            ''
                            ], 
                        api_versions = [
                            ''
                            ], 
                        operations = [
                            ''
                            ], 
                        resource_names = [
                            ''
                            ], 
                        resources = [
                            ''
                            ], 
                        scope = '', )
                    ], 
                match_policy = '', 
                namespace_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                    match_expressions = [
                        kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                            key = '', 
                            operator = '', 
                            values = [
                                ''
                                ], )
                        ], 
                    match_labels = {
                        'key' : ''
                        }, ), 
                object_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                    match_expressions = [
                        kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                            key = '', 
                            operator = '', 
                            values = [
                                ''
                                ], )
                        ], 
                    match_labels = {
                        'key' : ''
                        }, ), 
                resource_rules = [
                    kubernetes_asyncio.client.models.v1beta1/named_rule_with_operations.v1beta1.NamedRuleWithOperations(
                        api_groups = [
                            ''
                            ], 
                        api_versions = [
                            ''
                            ], 
                        operations = [
                            ''
                            ], 
                        resource_names = [
                            ''
                            ], 
                        resources = [
                            ''
                            ], 
                        scope = '', )
                    ]
            )
        else :
            return V1beta1MatchResources(
        )

    def testV1beta1MatchResources(self):
        """Test V1beta1MatchResources"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
