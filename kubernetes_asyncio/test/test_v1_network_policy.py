# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_network_policy import V1NetworkPolicy  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1NetworkPolicy(unittest.TestCase):
    """V1NetworkPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1NetworkPolicy
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_network_policy.V1NetworkPolicy()  # noqa: E501
        if include_optional :
            return V1NetworkPolicy(
                api_version = '', 
                kind = '', 
                metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ), 
                spec = kubernetes_asyncio.client.models.v1/network_policy_spec.v1.NetworkPolicySpec(
                    egress = [
                        kubernetes_asyncio.client.models.v1/network_policy_egress_rule.v1.NetworkPolicyEgressRule(
                            ports = [
                                kubernetes_asyncio.client.models.v1/network_policy_port.v1.NetworkPolicyPort(
                                    end_port = 56, 
                                    port = kubernetes_asyncio.client.models.port.port(), 
                                    protocol = '', )
                                ], 
                            to = [
                                kubernetes_asyncio.client.models.v1/network_policy_peer.v1.NetworkPolicyPeer(
                                    ip_block = kubernetes_asyncio.client.models.v1/ip_block.v1.IPBlock(
                                        cidr = '', 
                                        except = [
                                            ''
                                            ], ), 
                                    namespace_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                                        match_expressions = [
                                            kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                                key = '', 
                                                operator = '', 
                                                values = [
                                                    ''
                                                    ], )
                                            ], 
                                        match_labels = {
                                            'key' : ''
                                            }, ), 
                                    pod_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(), )
                                ], )
                        ], 
                    ingress = [
                        kubernetes_asyncio.client.models.v1/network_policy_ingress_rule.v1.NetworkPolicyIngressRule(
                            from = [
                                kubernetes_asyncio.client.models.v1/network_policy_peer.v1.NetworkPolicyPeer()
                                ], )
                        ], 
                    pod_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(), 
                    policy_types = [
                        ''
                        ], )
            )
        else :
            return V1NetworkPolicy(
        )

    def testV1NetworkPolicy(self):
        """Test V1NetworkPolicy"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
