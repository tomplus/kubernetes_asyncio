# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_certificate_signing_request_spec import V1CertificateSigningRequestSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1CertificateSigningRequestSpec(unittest.TestCase):
    """V1CertificateSigningRequestSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1CertificateSigningRequestSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_certificate_signing_request_spec.V1CertificateSigningRequestSpec()  # noqa: E501
        if include_optional :
            return V1CertificateSigningRequestSpec(
                expiration_seconds = 56, 
                extra = {
                    'key' : [
                        ''
                        ]
                    }, 
                groups = [
                    ''
                    ], 
                request = 'YQ==', 
                signer_name = '', 
                uid = '', 
                usages = [
                    ''
                    ], 
                username = ''
            )
        else :
            return V1CertificateSigningRequestSpec(
                request = 'YQ==',
                signer_name = '',
        )

    def testV1CertificateSigningRequestSpec(self):
        """Test V1CertificateSigningRequestSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
