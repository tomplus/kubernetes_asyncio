# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_ephemeral_container import V1EphemeralContainer  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1EphemeralContainer(unittest.TestCase):
    """V1EphemeralContainer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1EphemeralContainer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_ephemeral_container.V1EphemeralContainer()  # noqa: E501
        if include_optional :
            return V1EphemeralContainer(
                args = [
                    ''
                    ], 
                command = [
                    ''
                    ], 
                env = [
                    kubernetes_asyncio.client.models.v1/env_var.v1.EnvVar(
                        name = '', 
                        value = '', 
                        value_from = kubernetes_asyncio.client.models.v1/env_var_source.v1.EnvVarSource(
                            config_map_key_ref = kubernetes_asyncio.client.models.v1/config_map_key_selector.v1.ConfigMapKeySelector(
                                key = '', 
                                name = '', 
                                optional = True, ), 
                            field_ref = kubernetes_asyncio.client.models.v1/object_field_selector.v1.ObjectFieldSelector(
                                api_version = '', 
                                field_path = '', ), 
                            resource_field_ref = kubernetes_asyncio.client.models.v1/resource_field_selector.v1.ResourceFieldSelector(
                                container_name = '', 
                                divisor = '', 
                                resource = '', ), 
                            secret_key_ref = kubernetes_asyncio.client.models.v1/secret_key_selector.v1.SecretKeySelector(
                                key = '', 
                                name = '', 
                                optional = True, ), ), )
                    ], 
                env_from = [
                    kubernetes_asyncio.client.models.v1/env_from_source.v1.EnvFromSource(
                        config_map_ref = kubernetes_asyncio.client.models.v1/config_map_env_source.v1.ConfigMapEnvSource(
                            name = '', 
                            optional = True, ), 
                        prefix = '', 
                        secret_ref = kubernetes_asyncio.client.models.v1/secret_env_source.v1.SecretEnvSource(
                            name = '', 
                            optional = True, ), )
                    ], 
                image = '', 
                image_pull_policy = '', 
                lifecycle = kubernetes_asyncio.client.models.v1/lifecycle.v1.Lifecycle(
                    post_start = kubernetes_asyncio.client.models.v1/lifecycle_handler.v1.LifecycleHandler(
                        exec = kubernetes_asyncio.client.models.v1/exec_action.v1.ExecAction(
                            command = [
                                ''
                                ], ), 
                        http_get = kubernetes_asyncio.client.models.v1/http_get_action.v1.HTTPGetAction(
                            host = '', 
                            http_headers = [
                                kubernetes_asyncio.client.models.v1/http_header.v1.HTTPHeader(
                                    name = '', 
                                    value = '', )
                                ], 
                            path = '', 
                            port = kubernetes_asyncio.client.models.port.port(), 
                            scheme = '', ), 
                        tcp_socket = kubernetes_asyncio.client.models.v1/tcp_socket_action.v1.TCPSocketAction(
                            host = '', 
                            port = kubernetes_asyncio.client.models.port.port(), ), ), 
                    pre_stop = kubernetes_asyncio.client.models.v1/lifecycle_handler.v1.LifecycleHandler(), ), 
                liveness_probe = kubernetes_asyncio.client.models.v1/probe.v1.Probe(
                    exec = kubernetes_asyncio.client.models.v1/exec_action.v1.ExecAction(
                        command = [
                            ''
                            ], ), 
                    failure_threshold = 56, 
                    grpc = kubernetes_asyncio.client.models.v1/grpc_action.v1.GRPCAction(
                        port = 56, 
                        service = '', ), 
                    http_get = kubernetes_asyncio.client.models.v1/http_get_action.v1.HTTPGetAction(
                        host = '', 
                        http_headers = [
                            kubernetes_asyncio.client.models.v1/http_header.v1.HTTPHeader(
                                name = '', 
                                value = '', )
                            ], 
                        path = '', 
                        port = kubernetes_asyncio.client.models.port.port(), 
                        scheme = '', ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = kubernetes_asyncio.client.models.v1/tcp_socket_action.v1.TCPSocketAction(
                        host = '', 
                        port = kubernetes_asyncio.client.models.port.port(), ), 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ), 
                name = '', 
                ports = [
                    kubernetes_asyncio.client.models.v1/container_port.v1.ContainerPort(
                        container_port = 56, 
                        host_ip = '', 
                        host_port = 56, 
                        name = '', 
                        protocol = '', )
                    ], 
                readiness_probe = kubernetes_asyncio.client.models.v1/probe.v1.Probe(
                    exec = kubernetes_asyncio.client.models.v1/exec_action.v1.ExecAction(
                        command = [
                            ''
                            ], ), 
                    failure_threshold = 56, 
                    grpc = kubernetes_asyncio.client.models.v1/grpc_action.v1.GRPCAction(
                        port = 56, 
                        service = '', ), 
                    http_get = kubernetes_asyncio.client.models.v1/http_get_action.v1.HTTPGetAction(
                        host = '', 
                        http_headers = [
                            kubernetes_asyncio.client.models.v1/http_header.v1.HTTPHeader(
                                name = '', 
                                value = '', )
                            ], 
                        path = '', 
                        port = kubernetes_asyncio.client.models.port.port(), 
                        scheme = '', ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = kubernetes_asyncio.client.models.v1/tcp_socket_action.v1.TCPSocketAction(
                        host = '', 
                        port = kubernetes_asyncio.client.models.port.port(), ), 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ), 
                resources = kubernetes_asyncio.client.models.v1/resource_requirements.v1.ResourceRequirements(
                    limits = {
                        'key' : ''
                        }, 
                    requests = {
                        'key' : ''
                        }, ), 
                security_context = kubernetes_asyncio.client.models.v1/security_context.v1.SecurityContext(
                    allow_privilege_escalation = True, 
                    capabilities = kubernetes_asyncio.client.models.v1/capabilities.v1.Capabilities(
                        add = [
                            ''
                            ], 
                        drop = [
                            ''
                            ], ), 
                    privileged = True, 
                    proc_mount = '', 
                    read_only_root_filesystem = True, 
                    run_as_group = 56, 
                    run_as_non_root = True, 
                    run_as_user = 56, 
                    se_linux_options = kubernetes_asyncio.client.models.v1/se_linux_options.v1.SELinuxOptions(
                        level = '', 
                        role = '', 
                        type = '', 
                        user = '', ), 
                    seccomp_profile = kubernetes_asyncio.client.models.v1/seccomp_profile.v1.SeccompProfile(
                        localhost_profile = '', 
                        type = '', ), 
                    windows_options = kubernetes_asyncio.client.models.v1/windows_security_context_options.v1.WindowsSecurityContextOptions(
                        gmsa_credential_spec = '', 
                        gmsa_credential_spec_name = '', 
                        host_process = True, 
                        run_as_user_name = '', ), ), 
                startup_probe = kubernetes_asyncio.client.models.v1/probe.v1.Probe(
                    exec = kubernetes_asyncio.client.models.v1/exec_action.v1.ExecAction(
                        command = [
                            ''
                            ], ), 
                    failure_threshold = 56, 
                    grpc = kubernetes_asyncio.client.models.v1/grpc_action.v1.GRPCAction(
                        port = 56, 
                        service = '', ), 
                    http_get = kubernetes_asyncio.client.models.v1/http_get_action.v1.HTTPGetAction(
                        host = '', 
                        http_headers = [
                            kubernetes_asyncio.client.models.v1/http_header.v1.HTTPHeader(
                                name = '', 
                                value = '', )
                            ], 
                        path = '', 
                        port = kubernetes_asyncio.client.models.port.port(), 
                        scheme = '', ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = kubernetes_asyncio.client.models.v1/tcp_socket_action.v1.TCPSocketAction(
                        host = '', 
                        port = kubernetes_asyncio.client.models.port.port(), ), 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ), 
                stdin = True, 
                stdin_once = True, 
                target_container_name = '', 
                termination_message_path = '', 
                termination_message_policy = '', 
                tty = True, 
                volume_devices = [
                    kubernetes_asyncio.client.models.v1/volume_device.v1.VolumeDevice(
                        device_path = '', 
                        name = '', )
                    ], 
                volume_mounts = [
                    kubernetes_asyncio.client.models.v1/volume_mount.v1.VolumeMount(
                        mount_path = '', 
                        mount_propagation = '', 
                        name = '', 
                        read_only = True, 
                        sub_path = '', 
                        sub_path_expr = '', )
                    ], 
                working_dir = ''
            )
        else :
            return V1EphemeralContainer(
                name = '',
        )

    def testV1EphemeralContainer(self):
        """Test V1EphemeralContainer"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
