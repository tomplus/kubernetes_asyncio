# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_resource_slice_spec import V1beta1ResourceSliceSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1ResourceSliceSpec(unittest.TestCase):
    """V1beta1ResourceSliceSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1ResourceSliceSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_resource_slice_spec.V1beta1ResourceSliceSpec()  # noqa: E501
        if include_optional :
            return V1beta1ResourceSliceSpec(
                all_nodes = True, 
                devices = [
                    kubernetes_asyncio.client.models.v1beta1/device.v1beta1.Device(
                        basic = kubernetes_asyncio.client.models.v1beta1/basic_device.v1beta1.BasicDevice(
                            all_nodes = True, 
                            attributes = {
                                'key' : kubernetes_asyncio.client.models.v1beta1/device_attribute.v1beta1.DeviceAttribute(
                                    bool = True, 
                                    int = 56, 
                                    string = '', 
                                    version = '', )
                                }, 
                            capacity = {
                                'key' : kubernetes_asyncio.client.models.v1beta1/device_capacity.v1beta1.DeviceCapacity(
                                    value = '', )
                                }, 
                            consumes_counters = [
                                kubernetes_asyncio.client.models.v1beta1/device_counter_consumption.v1beta1.DeviceCounterConsumption(
                                    counter_set = '', 
                                    counters = {
                                        'key' : kubernetes_asyncio.client.models.v1beta1/counter.v1beta1.Counter(
                                            value = '', )
                                        }, )
                                ], 
                            node_name = '', 
                            node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                node_selector_terms = [
                                    kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                        match_expressions = [
                                            kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', 
                                                values = [
                                                    ''
                                                    ], )
                                            ], 
                                        match_fields = [
                                            kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', )
                                            ], )
                                    ], ), 
                            taints = [
                                kubernetes_asyncio.client.models.v1beta1/device_taint.v1beta1.DeviceTaint(
                                    effect = '', 
                                    key = '', 
                                    time_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    value = '', )
                                ], ), 
                        name = '', )
                    ], 
                driver = '', 
                node_name = '', 
                node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                    node_selector_terms = [
                        kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                            match_expressions = [
                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_fields = [
                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '', 
                                    operator = '', )
                                ], )
                        ], ), 
                per_device_node_selection = True, 
                pool = kubernetes_asyncio.client.models.v1beta1/resource_pool.v1beta1.ResourcePool(
                    generation = 56, 
                    name = '', 
                    resource_slice_count = 56, ), 
                shared_counters = [
                    kubernetes_asyncio.client.models.v1beta1/counter_set.v1beta1.CounterSet(
                        counters = {
                            'key' : kubernetes_asyncio.client.models.v1beta1/counter.v1beta1.Counter(
                                value = '', )
                            }, 
                        name = '', )
                    ]
            )
        else :
            return V1beta1ResourceSliceSpec(
                driver = '',
                pool = kubernetes_asyncio.client.models.v1beta1/resource_pool.v1beta1.ResourcePool(
                    generation = 56, 
                    name = '', 
                    resource_slice_count = 56, ),
        )

    def testV1beta1ResourceSliceSpec(self):
        """Test V1beta1ResourceSliceSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
