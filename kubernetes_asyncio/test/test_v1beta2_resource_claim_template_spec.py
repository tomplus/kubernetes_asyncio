# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta2_resource_claim_template_spec import V1beta2ResourceClaimTemplateSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta2ResourceClaimTemplateSpec(unittest.TestCase):
    """V1beta2ResourceClaimTemplateSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta2ResourceClaimTemplateSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta2_resource_claim_template_spec.V1beta2ResourceClaimTemplateSpec()  # noqa: E501
        if include_optional :
            return V1beta2ResourceClaimTemplateSpec(
                metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ), 
                spec = kubernetes_asyncio.client.models.v1beta2/resource_claim_spec.v1beta2.ResourceClaimSpec(
                    devices = kubernetes_asyncio.client.models.v1beta2/device_claim.v1beta2.DeviceClaim(
                        config = [
                            kubernetes_asyncio.client.models.v1beta2/device_claim_configuration.v1beta2.DeviceClaimConfiguration(
                                opaque = kubernetes_asyncio.client.models.v1beta2/opaque_device_configuration.v1beta2.OpaqueDeviceConfiguration(
                                    driver = '', 
                                    parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                                requests = [
                                    ''
                                    ], )
                            ], 
                        constraints = [
                            kubernetes_asyncio.client.models.v1beta2/device_constraint.v1beta2.DeviceConstraint(
                                match_attribute = '', )
                            ], 
                        requests = [
                            kubernetes_asyncio.client.models.v1beta2/device_request.v1beta2.DeviceRequest(
                                exactly = kubernetes_asyncio.client.models.v1beta2/exact_device_request.v1beta2.ExactDeviceRequest(
                                    admin_access = True, 
                                    allocation_mode = '', 
                                    count = 56, 
                                    device_class_name = '', 
                                    selectors = [
                                        kubernetes_asyncio.client.models.v1beta2/device_selector.v1beta2.DeviceSelector(
                                            cel = kubernetes_asyncio.client.models.v1beta2/cel_device_selector.v1beta2.CELDeviceSelector(
                                                expression = '', ), )
                                        ], 
                                    tolerations = [
                                        kubernetes_asyncio.client.models.v1beta2/device_toleration.v1beta2.DeviceToleration(
                                            effect = '', 
                                            key = '', 
                                            operator = '', 
                                            toleration_seconds = 56, 
                                            value = '', )
                                        ], ), 
                                first_available = [
                                    kubernetes_asyncio.client.models.v1beta2/device_sub_request.v1beta2.DeviceSubRequest(
                                        allocation_mode = '', 
                                        count = 56, 
                                        device_class_name = '', 
                                        name = '', )
                                    ], 
                                name = '', )
                            ], ), )
            )
        else :
            return V1beta2ResourceClaimTemplateSpec(
                spec = kubernetes_asyncio.client.models.v1beta2/resource_claim_spec.v1beta2.ResourceClaimSpec(
                    devices = kubernetes_asyncio.client.models.v1beta2/device_claim.v1beta2.DeviceClaim(
                        config = [
                            kubernetes_asyncio.client.models.v1beta2/device_claim_configuration.v1beta2.DeviceClaimConfiguration(
                                opaque = kubernetes_asyncio.client.models.v1beta2/opaque_device_configuration.v1beta2.OpaqueDeviceConfiguration(
                                    driver = '', 
                                    parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                                requests = [
                                    ''
                                    ], )
                            ], 
                        constraints = [
                            kubernetes_asyncio.client.models.v1beta2/device_constraint.v1beta2.DeviceConstraint(
                                match_attribute = '', )
                            ], 
                        requests = [
                            kubernetes_asyncio.client.models.v1beta2/device_request.v1beta2.DeviceRequest(
                                exactly = kubernetes_asyncio.client.models.v1beta2/exact_device_request.v1beta2.ExactDeviceRequest(
                                    admin_access = True, 
                                    allocation_mode = '', 
                                    count = 56, 
                                    device_class_name = '', 
                                    selectors = [
                                        kubernetes_asyncio.client.models.v1beta2/device_selector.v1beta2.DeviceSelector(
                                            cel = kubernetes_asyncio.client.models.v1beta2/cel_device_selector.v1beta2.CELDeviceSelector(
                                                expression = '', ), )
                                        ], 
                                    tolerations = [
                                        kubernetes_asyncio.client.models.v1beta2/device_toleration.v1beta2.DeviceToleration(
                                            effect = '', 
                                            key = '', 
                                            operator = '', 
                                            toleration_seconds = 56, 
                                            value = '', )
                                        ], ), 
                                first_available = [
                                    kubernetes_asyncio.client.models.v1beta2/device_sub_request.v1beta2.DeviceSubRequest(
                                        allocation_mode = '', 
                                        count = 56, 
                                        device_class_name = '', 
                                        name = '', )
                                    ], 
                                name = '', )
                            ], ), ),
        )

    def testV1beta2ResourceClaimTemplateSpec(self):
        """Test V1beta2ResourceClaimTemplateSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
