# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_validating_admission_policy import V1beta1ValidatingAdmissionPolicy  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1ValidatingAdmissionPolicy(unittest.TestCase):
    """V1beta1ValidatingAdmissionPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1ValidatingAdmissionPolicy
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_validating_admission_policy.V1beta1ValidatingAdmissionPolicy()  # noqa: E501
        if include_optional :
            return V1beta1ValidatingAdmissionPolicy(
                api_version = '', 
                kind = '', 
                metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ), 
                spec = kubernetes_asyncio.client.models.v1beta1/validating_admission_policy_spec.v1beta1.ValidatingAdmissionPolicySpec(
                    audit_annotations = [
                        kubernetes_asyncio.client.models.v1beta1/audit_annotation.v1beta1.AuditAnnotation(
                            key = '', 
                            value_expression = '', )
                        ], 
                    failure_policy = '', 
                    match_conditions = [
                        kubernetes_asyncio.client.models.v1beta1/match_condition.v1beta1.MatchCondition(
                            expression = '', 
                            name = '', )
                        ], 
                    match_constraints = kubernetes_asyncio.client.models.v1beta1/match_resources.v1beta1.MatchResources(
                        exclude_resource_rules = [
                            kubernetes_asyncio.client.models.v1beta1/named_rule_with_operations.v1beta1.NamedRuleWithOperations(
                                api_groups = [
                                    ''
                                    ], 
                                api_versions = [
                                    ''
                                    ], 
                                operations = [
                                    ''
                                    ], 
                                resource_names = [
                                    ''
                                    ], 
                                resources = [
                                    ''
                                    ], 
                                scope = '', )
                            ], 
                        match_policy = '', 
                        namespace_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), 
                        object_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(), 
                        resource_rules = [
                            kubernetes_asyncio.client.models.v1beta1/named_rule_with_operations.v1beta1.NamedRuleWithOperations(
                                scope = '', )
                            ], ), 
                    param_kind = kubernetes_asyncio.client.models.v1beta1/param_kind.v1beta1.ParamKind(
                        api_version = '', 
                        kind = '', ), 
                    validations = [
                        kubernetes_asyncio.client.models.v1beta1/validation.v1beta1.Validation(
                            expression = '', 
                            message = '', 
                            message_expression = '', 
                            reason = '', )
                        ], 
                    variables = [
                        kubernetes_asyncio.client.models.v1beta1/variable.v1beta1.Variable(
                            expression = '', 
                            name = '', )
                        ], ), 
                status = kubernetes_asyncio.client.models.v1beta1/validating_admission_policy_status.v1beta1.ValidatingAdmissionPolicyStatus(
                    conditions = [
                        kubernetes_asyncio.client.models.v1/condition.v1.Condition(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            observed_generation = 56, 
                            reason = '', 
                            status = '', 
                            type = '', )
                        ], 
                    observed_generation = 56, 
                    type_checking = kubernetes_asyncio.client.models.v1beta1/type_checking.v1beta1.TypeChecking(
                        expression_warnings = [
                            kubernetes_asyncio.client.models.v1beta1/expression_warning.v1beta1.ExpressionWarning(
                                field_ref = '', 
                                warning = '', )
                            ], ), )
            )
        else :
            return V1beta1ValidatingAdmissionPolicy(
        )

    def testV1beta1ValidatingAdmissionPolicy(self):
        """Test V1beta1ValidatingAdmissionPolicy"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
