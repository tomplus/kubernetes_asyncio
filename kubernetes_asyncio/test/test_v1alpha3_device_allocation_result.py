# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1alpha3_device_allocation_result import V1alpha3DeviceAllocationResult  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1alpha3DeviceAllocationResult(unittest.TestCase):
    """V1alpha3DeviceAllocationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha3DeviceAllocationResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1alpha3_device_allocation_result.V1alpha3DeviceAllocationResult()  # noqa: E501
        if include_optional :
            return V1alpha3DeviceAllocationResult(
                config = [
                    kubernetes_asyncio.client.models.v1alpha3/device_allocation_configuration.v1alpha3.DeviceAllocationConfiguration(
                        opaque = kubernetes_asyncio.client.models.v1alpha3/opaque_device_configuration.v1alpha3.OpaqueDeviceConfiguration(
                            driver = '', 
                            parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                        requests = [
                            ''
                            ], 
                        source = '', )
                    ], 
                results = [
                    kubernetes_asyncio.client.models.v1alpha3/device_request_allocation_result.v1alpha3.DeviceRequestAllocationResult(
                        admin_access = True, 
                        device = '', 
                        driver = '', 
                        pool = '', 
                        request = '', 
                        tolerations = [
                            kubernetes_asyncio.client.models.v1alpha3/device_toleration.v1alpha3.DeviceToleration(
                                effect = '', 
                                key = '', 
                                operator = '', 
                                toleration_seconds = 56, 
                                value = '', )
                            ], )
                    ]
            )
        else :
            return V1alpha3DeviceAllocationResult(
        )

    def testV1alpha3DeviceAllocationResult(self):
        """Test V1alpha3DeviceAllocationResult"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
