# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_pod_status import V1PodStatus  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1PodStatus(unittest.TestCase):
    """V1PodStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1PodStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_pod_status.V1PodStatus()  # noqa: E501
        if include_optional :
            return V1PodStatus(
                conditions = [
                    kubernetes_asyncio.client.models.v1/pod_condition.v1.PodCondition(
                        last_probe_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '', 
                        reason = '', 
                        status = '', 
                        type = '', )
                    ], 
                container_statuses = [
                    kubernetes_asyncio.client.models.v1/container_status.v1.ContainerStatus(
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = kubernetes_asyncio.client.models.v1/container_state.v1.ContainerState(
                            running = kubernetes_asyncio.client.models.v1/container_state_running.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = kubernetes_asyncio.client.models.v1/container_state_terminated.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = kubernetes_asyncio.client.models.v1/container_state_waiting.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        restart_count = 56, 
                        started = True, 
                        state = kubernetes_asyncio.client.models.v1/container_state.v1.ContainerState(), )
                    ], 
                ephemeral_container_statuses = [
                    kubernetes_asyncio.client.models.v1/container_status.v1.ContainerStatus(
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = kubernetes_asyncio.client.models.v1/container_state.v1.ContainerState(
                            running = kubernetes_asyncio.client.models.v1/container_state_running.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = kubernetes_asyncio.client.models.v1/container_state_terminated.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = kubernetes_asyncio.client.models.v1/container_state_waiting.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        restart_count = 56, 
                        started = True, 
                        state = kubernetes_asyncio.client.models.v1/container_state.v1.ContainerState(), )
                    ], 
                host_ip = '', 
                init_container_statuses = [
                    kubernetes_asyncio.client.models.v1/container_status.v1.ContainerStatus(
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = kubernetes_asyncio.client.models.v1/container_state.v1.ContainerState(
                            running = kubernetes_asyncio.client.models.v1/container_state_running.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = kubernetes_asyncio.client.models.v1/container_state_terminated.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = kubernetes_asyncio.client.models.v1/container_state_waiting.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        restart_count = 56, 
                        started = True, 
                        state = kubernetes_asyncio.client.models.v1/container_state.v1.ContainerState(), )
                    ], 
                message = '', 
                nominated_node_name = '', 
                phase = '', 
                pod_ip = '', 
                pod_ips = [
                    kubernetes_asyncio.client.models.v1/pod_ip.v1.PodIP(
                        ip = '', )
                    ], 
                qos_class = '', 
                reason = '', 
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else :
            return V1PodStatus(
        )

    def testV1PodStatus(self):
        """Test V1PodStatus"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
