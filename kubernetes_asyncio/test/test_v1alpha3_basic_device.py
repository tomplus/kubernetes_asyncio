# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1alpha3_basic_device import V1alpha3BasicDevice  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1alpha3BasicDevice(unittest.TestCase):
    """V1alpha3BasicDevice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha3BasicDevice
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1alpha3_basic_device.V1alpha3BasicDevice()  # noqa: E501
        if include_optional :
            return V1alpha3BasicDevice(
                all_nodes = True, 
                attributes = {
                    'key' : kubernetes_asyncio.client.models.v1alpha3/device_attribute.v1alpha3.DeviceAttribute(
                        bool = True, 
                        int = 56, 
                        string = '', 
                        version = '', )
                    }, 
                capacity = {
                    'key' : ''
                    }, 
                consumes_counters = [
                    kubernetes_asyncio.client.models.v1alpha3/device_counter_consumption.v1alpha3.DeviceCounterConsumption(
                        counter_set = '', 
                        counters = {
                            'key' : kubernetes_asyncio.client.models.v1alpha3/counter.v1alpha3.Counter(
                                value = '', )
                            }, )
                    ], 
                node_name = '', 
                node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                    node_selector_terms = [
                        kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                            match_expressions = [
                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_fields = [
                                kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '', 
                                    operator = '', )
                                ], )
                        ], ), 
                taints = [
                    kubernetes_asyncio.client.models.v1alpha3/device_taint.v1alpha3.DeviceTaint(
                        effect = '', 
                        key = '', 
                        time_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value = '', )
                    ]
            )
        else :
            return V1alpha3BasicDevice(
        )

    def testV1alpha3BasicDevice(self):
        """Test V1alpha3BasicDevice"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
