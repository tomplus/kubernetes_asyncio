# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_validating_admission_policy_spec import V1ValidatingAdmissionPolicySpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1ValidatingAdmissionPolicySpec(unittest.TestCase):
    """V1ValidatingAdmissionPolicySpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1ValidatingAdmissionPolicySpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_validating_admission_policy_spec.V1ValidatingAdmissionPolicySpec()  # noqa: E501
        if include_optional :
            return V1ValidatingAdmissionPolicySpec(
                audit_annotations = [
                    kubernetes_asyncio.client.models.v1/audit_annotation.v1.AuditAnnotation(
                        key = '', 
                        value_expression = '', )
                    ], 
                failure_policy = '', 
                match_conditions = [
                    kubernetes_asyncio.client.models.v1/match_condition.v1.MatchCondition(
                        expression = '', 
                        name = '', )
                    ], 
                match_constraints = kubernetes_asyncio.client.models.v1/match_resources.v1.MatchResources(
                    exclude_resource_rules = [
                        kubernetes_asyncio.client.models.v1/named_rule_with_operations.v1.NamedRuleWithOperations(
                            api_groups = [
                                ''
                                ], 
                            api_versions = [
                                ''
                                ], 
                            operations = [
                                ''
                                ], 
                            resource_names = [
                                ''
                                ], 
                            resources = [
                                ''
                                ], 
                            scope = '', )
                        ], 
                    match_policy = '', 
                    namespace_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(
                        match_expressions = [
                            kubernetes_asyncio.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                key = '', 
                                operator = '', 
                                values = [
                                    ''
                                    ], )
                            ], 
                        match_labels = {
                            'key' : ''
                            }, ), 
                    object_selector = kubernetes_asyncio.client.models.v1/label_selector.v1.LabelSelector(), 
                    resource_rules = [
                        kubernetes_asyncio.client.models.v1/named_rule_with_operations.v1.NamedRuleWithOperations(
                            scope = '', )
                        ], ), 
                param_kind = kubernetes_asyncio.client.models.v1/param_kind.v1.ParamKind(
                    api_version = '', 
                    kind = '', ), 
                validations = [
                    kubernetes_asyncio.client.models.v1/validation.v1.Validation(
                        expression = '', 
                        message = '', 
                        message_expression = '', 
                        reason = '', )
                    ], 
                variables = [
                    kubernetes_asyncio.client.models.v1/variable.v1.Variable(
                        expression = '', 
                        name = '', )
                    ]
            )
        else :
            return V1ValidatingAdmissionPolicySpec(
        )

    def testV1ValidatingAdmissionPolicySpec(self):
        """Test V1ValidatingAdmissionPolicySpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
