# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.11
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1_ingress_spec import V1IngressSpec  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1IngressSpec(unittest.TestCase):
    """V1IngressSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1IngressSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1_ingress_spec.V1IngressSpec()  # noqa: E501
        if include_optional :
            return V1IngressSpec(
                default_backend = kubernetes_asyncio.client.models.v1/ingress_backend.v1.IngressBackend(
                    resource = kubernetes_asyncio.client.models.v1/typed_local_object_reference.v1.TypedLocalObjectReference(
                        api_group = '', 
                        kind = '', 
                        name = '', ), 
                    service = kubernetes_asyncio.client.models.v1/ingress_service_backend.v1.IngressServiceBackend(
                        name = '', 
                        port = kubernetes_asyncio.client.models.v1/service_backend_port.v1.ServiceBackendPort(
                            name = '', 
                            number = 56, ), ), ), 
                ingress_class_name = '', 
                rules = [
                    kubernetes_asyncio.client.models.v1/ingress_rule.v1.IngressRule(
                        host = '', 
                        http = kubernetes_asyncio.client.models.v1/http_ingress_rule_value.v1.HTTPIngressRuleValue(
                            paths = [
                                kubernetes_asyncio.client.models.v1/http_ingress_path.v1.HTTPIngressPath(
                                    backend = kubernetes_asyncio.client.models.v1/ingress_backend.v1.IngressBackend(
                                        resource = kubernetes_asyncio.client.models.v1/typed_local_object_reference.v1.TypedLocalObjectReference(
                                            api_group = '', 
                                            kind = '', 
                                            name = '', ), 
                                        service = kubernetes_asyncio.client.models.v1/ingress_service_backend.v1.IngressServiceBackend(
                                            name = '', 
                                            port = kubernetes_asyncio.client.models.v1/service_backend_port.v1.ServiceBackendPort(
                                                name = '', 
                                                number = 56, ), ), ), 
                                    path = '', 
                                    path_type = '', )
                                ], ), )
                    ], 
                tls = [
                    kubernetes_asyncio.client.models.v1/ingress_tls.v1.IngressTLS(
                        hosts = [
                            ''
                            ], 
                        secret_name = '', )
                    ]
            )
        else :
            return V1IngressSpec(
        )

    def testV1IngressSpec(self):
        """Test V1IngressSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
