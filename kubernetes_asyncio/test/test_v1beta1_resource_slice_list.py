# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.33.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes_asyncio.client
from kubernetes_asyncio.client.models.v1beta1_resource_slice_list import V1beta1ResourceSliceList  # noqa: E501
from kubernetes_asyncio.client.rest import ApiException

class TestV1beta1ResourceSliceList(unittest.TestCase):
    """V1beta1ResourceSliceList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1ResourceSliceList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes_asyncio.client.models.v1beta1_resource_slice_list.V1beta1ResourceSliceList()  # noqa: E501
        if include_optional :
            return V1beta1ResourceSliceList(
                api_version = '', 
                items = [
                    kubernetes_asyncio.client.models.v1beta1/resource_slice.v1beta1.ResourceSlice(
                        api_version = '', 
                        kind = '', 
                        metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = kubernetes_asyncio.client.models.v1beta1/resource_slice_spec.v1beta1.ResourceSliceSpec(
                            all_nodes = True, 
                            devices = [
                                kubernetes_asyncio.client.models.v1beta1/device.v1beta1.Device(
                                    basic = kubernetes_asyncio.client.models.v1beta1/basic_device.v1beta1.BasicDevice(
                                        all_nodes = True, 
                                        attributes = {
                                            'key' : kubernetes_asyncio.client.models.v1beta1/device_attribute.v1beta1.DeviceAttribute(
                                                bool = True, 
                                                int = 56, 
                                                string = '', 
                                                version = '', )
                                            }, 
                                        capacity = {
                                            'key' : kubernetes_asyncio.client.models.v1beta1/device_capacity.v1beta1.DeviceCapacity(
                                                value = '', )
                                            }, 
                                        consumes_counters = [
                                            kubernetes_asyncio.client.models.v1beta1/device_counter_consumption.v1beta1.DeviceCounterConsumption(
                                                counter_set = '', 
                                                counters = {
                                                    'key' : kubernetes_asyncio.client.models.v1beta1/counter.v1beta1.Counter(
                                                        value = '', )
                                                    }, )
                                            ], 
                                        node_name = '', 
                                        node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                            node_selector_terms = [
                                                kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                                    match_expressions = [
                                                        kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                            key = '', 
                                                            operator = '', 
                                                            values = [
                                                                ''
                                                                ], )
                                                        ], 
                                                    match_fields = [
                                                        kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                            key = '', 
                                                            operator = '', )
                                                        ], )
                                                ], ), 
                                        taints = [
                                            kubernetes_asyncio.client.models.v1beta1/device_taint.v1beta1.DeviceTaint(
                                                effect = '', 
                                                key = '', 
                                                time_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                value = '', )
                                            ], ), 
                                    name = '', )
                                ], 
                            driver = '', 
                            node_name = '', 
                            node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                node_selector_terms = [
                                    kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm()
                                    ], ), 
                            per_device_node_selection = True, 
                            pool = kubernetes_asyncio.client.models.v1beta1/resource_pool.v1beta1.ResourcePool(
                                generation = 56, 
                                name = '', 
                                resource_slice_count = 56, ), 
                            shared_counters = [
                                kubernetes_asyncio.client.models.v1beta1/counter_set.v1beta1.CounterSet(
                                    counters = {
                                        'key' : kubernetes_asyncio.client.models.v1beta1/counter.v1beta1.Counter(
                                            value = '', )
                                        }, 
                                    name = '', )
                                ], ), )
                    ], 
                kind = '', 
                metadata = kubernetes_asyncio.client.models.v1/list_meta.v1.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, 
                    resource_version = '', 
                    self_link = '', )
            )
        else :
            return V1beta1ResourceSliceList(
                items = [
                    kubernetes_asyncio.client.models.v1beta1/resource_slice.v1beta1.ResourceSlice(
                        api_version = '', 
                        kind = '', 
                        metadata = kubernetes_asyncio.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                kubernetes_asyncio.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = kubernetes_asyncio.client.models.fields_v1.fieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                kubernetes_asyncio.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = kubernetes_asyncio.client.models.v1beta1/resource_slice_spec.v1beta1.ResourceSliceSpec(
                            all_nodes = True, 
                            devices = [
                                kubernetes_asyncio.client.models.v1beta1/device.v1beta1.Device(
                                    basic = kubernetes_asyncio.client.models.v1beta1/basic_device.v1beta1.BasicDevice(
                                        all_nodes = True, 
                                        attributes = {
                                            'key' : kubernetes_asyncio.client.models.v1beta1/device_attribute.v1beta1.DeviceAttribute(
                                                bool = True, 
                                                int = 56, 
                                                string = '', 
                                                version = '', )
                                            }, 
                                        capacity = {
                                            'key' : kubernetes_asyncio.client.models.v1beta1/device_capacity.v1beta1.DeviceCapacity(
                                                value = '', )
                                            }, 
                                        consumes_counters = [
                                            kubernetes_asyncio.client.models.v1beta1/device_counter_consumption.v1beta1.DeviceCounterConsumption(
                                                counter_set = '', 
                                                counters = {
                                                    'key' : kubernetes_asyncio.client.models.v1beta1/counter.v1beta1.Counter(
                                                        value = '', )
                                                    }, )
                                            ], 
                                        node_name = '', 
                                        node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                            node_selector_terms = [
                                                kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                                    match_expressions = [
                                                        kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                            key = '', 
                                                            operator = '', 
                                                            values = [
                                                                ''
                                                                ], )
                                                        ], 
                                                    match_fields = [
                                                        kubernetes_asyncio.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                            key = '', 
                                                            operator = '', )
                                                        ], )
                                                ], ), 
                                        taints = [
                                            kubernetes_asyncio.client.models.v1beta1/device_taint.v1beta1.DeviceTaint(
                                                effect = '', 
                                                key = '', 
                                                time_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                value = '', )
                                            ], ), 
                                    name = '', )
                                ], 
                            driver = '', 
                            node_name = '', 
                            node_selector = kubernetes_asyncio.client.models.v1/node_selector.v1.NodeSelector(
                                node_selector_terms = [
                                    kubernetes_asyncio.client.models.v1/node_selector_term.v1.NodeSelectorTerm()
                                    ], ), 
                            per_device_node_selection = True, 
                            pool = kubernetes_asyncio.client.models.v1beta1/resource_pool.v1beta1.ResourcePool(
                                generation = 56, 
                                name = '', 
                                resource_slice_count = 56, ), 
                            shared_counters = [
                                kubernetes_asyncio.client.models.v1beta1/counter_set.v1beta1.CounterSet(
                                    counters = {
                                        'key' : kubernetes_asyncio.client.models.v1beta1/counter.v1beta1.Counter(
                                            value = '', )
                                        }, 
                                    name = '', )
                                ], ), )
                    ],
        )

    def testV1beta1ResourceSliceList(self):
        """Test V1beta1ResourceSliceList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
